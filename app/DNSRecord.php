<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class DNSRecord extends Model
{
    protected $table = 'dns_records';
    protected $guarded = [];
    //
//    public static function boot()
//    {
//
//        parent::boot();
//
//        self::saving(function($model){
//            // ... code here
//            dd($model->dnszone);
//        });
//    }
public function recordTypes() {

    return array(
      'A' => 'Host Address',
      'AAAA' => 'IPv6 Host Address',
      'ALIAS' => 'Auto Resolved Alias',
      'CNAME' => 'Canonical name',
       'MX' => 'Mail Exchanger',
       'NS' => 'Name Server',
       'PTR' => 'Pointer',
       'SOA' => 'Start of Authority',
       'SRV' => 'Location of Service',
       'TXT' => 'Descriptive Text'

    );
}
    public function site() {
        $site = $this->belongsTo(Site::class);
        if ( $site ) {
            return $site;
        } else {
            return new \App\Site();
        }



    }
    public function user() {
        $site = $this->belongsTo(User::class);
        if ( $site ) {
            return $site;
        } else {
            return new \App\User();
        }



    }

    public function equipment() {
        $equipment = $this->belongsTo(Equipment::class);
        if ( $equipment ) {
            return $equipment;
        } else {
            return new \App\Equipment();
        }



    }
    public function ip() {
        return $this->hasOne(IP::class,  'id','ips_id');



    }
    public function dnsZone() {
        return $this->hasOne(DNSZone::class,  'id','dns_zones_id');



    }
    public function dnsZones() {

    return DNSZone::all();

    }
    public function dhcpLease() {
        return $this->hasOne(DhcpLease::class,  'id','dhcp_lease_id');



    }
    function save(array $options = []) {

        if ( $this->id ) {

            $origRecord = DNSRecord::where('id', $this->id)->first();;
            $origRecord->_removeDNS();

        }

        $result = parent::save($options);

$this->refresh();
$this->_updateDNS();

        return $result;
    }

    public function delete()
    {
        $this->_removeDNS();
        return parent::delete(); // TODO: Change the autogenerated stub
    }


     function _removeDNS() {
    // This should be called before saving dns changes otherwise old records may be orphaned

if (!$this->id ) {
 return;
}
    $server = $this->dnsZone->server;
    $key_file = $this->dnsZone->dns_key;

    $subdomain = $this->hostname;

    $zone = $this->dnsZone->domain;



//    $rzone = $parts[2] . "." . $parts[1] . "." . $parts[0] . ".in-addr.arpa";
//    $rsubdomain = $parts[3];

    if ( ( $this->record_type == "A") || ( $this->record_type == "PTR")) {
        $pipe = popen("/usr/bin/nsupdate" . " -d -D -k " . $key_file, 'w');

        fwrite($pipe, "server " . $server . "\n");
        fwrite($pipe, "zone " . $zone . "\n");
        fwrite($pipe, "update delete " . "$subdomain.$zone." . " " . $this->record_type . "\n");
        fwrite($pipe, "send\n");
        $int = pclose($pipe);
    }



}

    function _updateDNS() {

        // DNS
        $server = $this->dnsZone->server;
        $key_file = $this->dnsZone->dns_key;

        $subdomain = $this->hostname;

        $zone = $this->dnsZone->domain;

        if ( $this->record_type == "A") {

            $pipe = popen("/usr/bin/nsupdate" . " -d -D -k " . $key_file, 'w');
            fwrite($pipe, "server " . $server . "\n");
            fwrite($pipe, "zone " . $zone . "\n");
            fwrite($pipe, "update delete " . "$subdomain.$zone." . " A\n");
            fwrite($pipe, "update add " . "$subdomain.$zone." . " ". $this->ttl . " " . $this->record_type . " " . $this->target . "\n");


            fwrite($pipe, "send\n");
            $int = pclose($pipe);
        }
        if ( $this->record_type == "PTR") {

            $pipe = popen("/usr/bin/nsupdate" . " -d -D -k " . $key_file, 'w');
            fwrite($pipe, "server " . $server . "\n");
            fwrite($pipe, "zone " . $zone . "\n");
            fwrite($pipe, "update delete " . "$subdomain.$zone." . " PTR\n");
            fwrite($pipe, "update add " . "$subdomain.$zone." . " ". $this->ttl . " " . $this->record_type . " " . $this->target . "\n");

            fwrite($pipe, "send\n");
            $int = pclose($pipe);

        }
//            // Reverse
////            $pipe = popen("/usr/bin/nsupdate" . " -d -D -k " . "/hamwan/dns/Kif.hamwan.ca.+157+07954.private", 'w');
//            $pipe = popen("/usr/bin/nsupdate" . " -d -D -k " . $key_file, 'w');
//            fwrite($pipe, "server " . $server . "\n");
//            fwrite($pipe, "zone " . $rzone . "\n");
//            fwrite($pipe, "update delete " . "$rsubdomain.$rzone" . " PTR\n");
//            fwrite($pipe, "update add " . "$rsubdomain.$rzone" . " 300 PTR " . $subdomain . "." . $zone . "\n");
//            fwrite($pipe, "send\n");
//            $int = pclose($pipe);
//
//        }
//
//        if ($this->dns == "ReverseOnly" ) {
//            // Reverse
////            $pipe = popen("/usr/bin/nsupdate" . " -d -D -k " . "/hamwan/dns/Kif.hamwan.ca.+157++07954.private", 'w');
//            $pipe = popen("/usr/bin/nsupdate" . " -d -D -k " . $key_file, 'w');
//            fwrite($pipe, "server " . $server . "\n");
//            fwrite($pipe, "zone " . $rzone . "\n");
//            fwrite($pipe, "update delete " . "$rsubdomain.$rzone" . " A\n");
//            fwrite($pipe, "update add " . "$rsubdomain.$rzone" . " 300 PTR " . $subdomain . "." . $zone . "\n");
//            fwrite($pipe, "send\n");
//            $int = pclose($pipe);
//
//            //
//        }
//
//        if ($this->dns == "" ) {
//            // Forward
////            $pipe = popen("/usr/bin/nsupdate" . " -d -D -k " . "/hamwan/dns/Kif.hamwan.ca.+157+07954.private", 'w');
//            $pipe = popen("/usr/bin/nsupdate" . " -d -D -k " . $key_file, 'w');
//            fwrite($pipe, "server " . $server . "\n");
//            fwrite($pipe, "zone " . $zone . "\n");
//            fwrite($pipe, "update delete " . "$subdomain.$zone" . " A\n");
//            fwrite($pipe, "send\n");
//            $int = pclose($pipe);
//
//            // Reverse
//        }


        // Run nsupdate

        //print $this->nsupdate( $server, $subdomain, $ip, $zone);

    }
}
