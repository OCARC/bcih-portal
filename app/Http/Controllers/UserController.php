<?php

namespace App\Http\Controllers;

use App\Permission;
use App\Role;
use App\RsaKey;
use Illuminate\Http\Request;
use \App\User;
use Auth;

class UserController extends Controller
{

//
    /**
     * Display a listing of the resource.
     *
     * @return Response
     */
    public function index( Request $request )
    {
//
//        if ( env('APP_LDAP_AUTH_ENABLED', false) === true ) {
//
//            if ($this->ldap_bind($credentials) === true) {
//
//
//            }
//                $query = $this->createModel()->newQuery();
//            $query->where('callsign', 'ldap_' . $credentials['callsign']);
//            $query->where('realm', $credentials['realm']);
//
//                // We should sync the LDAP user here
//
//                // Try to load user from local database
//
//                $user = $query->first();
//
//
//                    // If one doesnt exist create one
//                    if (!$user) {
//                        // Create local user from LDAP
//
//                        // Bind
//                        $user = \App\User::create(
//                            array(
//                                'callsign' => 'ldap_' . strtoupper( $credentials['callsign']),
//                                'name' => 'LDAP User',
//                                'email' => 'LDAP User',
//                                'realm' => 'ldap',
//                                'password' => 'LDAP User'
//                            )
//                        );
//
//
//                    }
//                } else {
//                    session()->flash('msg', 'LDAP: Server rejected your credentials');
//                    return new \App\User();
//                }
//
//                // Sync
//
//                $query = $this->getLDAP()->query('dc=hamwan,dc=ca', '(&(uid=' . $credentials['callsign'] . '))');
//                $results = $query->execute();
//                if ($results->count() >= 2) {
//                    session()->flash('msg', 'LDAP: Server returned more than one account');
//                    return new \App\User();
//                }
//                if ($results->count() == 0) {
//                    session()->flash('msg', 'LDAP: Server did not return an account');
//                    return new \App\User();
//                }
//
//                if ($results->count() == 1) {
//                    $entry = $results[0];
//
//                    $user->name = $entry->getAttribute('cn')[0];
//                    $user->email = $entry->getAttribute('mail')[0];
//
//                    $user->save();
//                    if ( $user->wasChanged() ) {
//                        session()->flash('msg', 'LDAP: Your account information was updated with information received from the server.');
//                    }
//                    // return $user;
//                }
//
//                // Sync groups
//                $query = $this->getLDAP()->query( 'dc=hamwan,dc=ca','(&(member=uid=va7stv,OU=Users,DC=hamwan,DC=ca)(objectClass=posixGroup))');
//                $results = $query->execute();
//
////                dd( $results );
////                dd('ddd');
//                //
////                return new \App\User();
////                foreach ($results as $entry) {
////
////                }
//                return $user;
//            }
//        }
//
//        if ( env('APP_LOCAL_AUTH_ENABLED', true) === true ) {
//
//            if ($credentials['realm'] == 'local') {
//                // local user login
//                return parent::retrieveByCredentials($credentials); // TODO: Change the autogenerated stub
//            }
//        }
//
//
//        return parent::retrieveByCredentials(array()); // TODO: Change the autogenerated stub
//
//
//
        if ( Auth::user()->can('users.view_all') ) {
            // show all users if permissions allow
            $users = User::all();
        } else {
            $users = User::where('id', Auth::user()->id )->get();
        }

        return view('users.index', compact('users'));

    }

    /**
     * Retrieve the SSH key this user has chosen to publish
     * @param $callsign
     */
    function get_pub_sshkey( $callsign ) {
        $user = User::where('callsign', $callsign)->first();

        if (! $user) {
            abort(404, 'No Certificate Published For That User');
            return;
        }

        $key = $user->rsa_keys->where('publish',1)->first();

        if (! $key) {
            abort(404, 'No Certificate Published For That User');
            return;
        }
        header('Content-Disposition:attachment; filename="sshkey-' . $user->callsign . '.pub'. '"');
        return $key->public_key;
    }
    /**
     * Show the form for creating a new resource.
     *
     * @return Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return Response
     */
    public function store()
    {
        //
    }

    public function update_perms( User $user, Request $request)
    {
        //
        $user->syncPermissions( $request->permissions );
        return redirect("/users/" . $user->id . "#perms")->with('success', 'Permissions Modified Successfully');

    }
    public function update_roles( User $user, Request $request)
    {
        //

        $user->syncRoles( $request->roles );

        return redirect("/users/" . $user->id . "#perms")->with('success', 'Roles Modified Successfully');

    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return Response
     */
    public function show(User $user)
    {

        //

        return view('users.show', array( 'user' => $user, 'permissions' => Permission::all(), 'roles' => Role::all() ));


    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  int  $id
     * @return Response
     */
    public function update($id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return Response
     */
    public function destroy($id)
    {
        //
    }

}
