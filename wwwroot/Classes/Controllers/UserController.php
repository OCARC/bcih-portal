<?php

namespace Controllers;


class UserController extends Controller
{


    static function registerRoutes(&$router)
    {
        $router->map( 'GET', '/users.[:format]?', '\Controllers\UserController#index', 'users.index' );
        \App::appendTopNav(array('icon' => 'users', 'text' => 'Users', 'routeName' => 'users.index', 'link' => $router->generate('users.index' ) ));

        $router->map( 'GET',  '/users/create', '\Controllers\UserController#create', 'users.create' );
        $router->map( 'GET',  '/users/[:id]/edit', '\Controllers\UserController#edit', 'users.edit' );
        $router->map( 'GET',  '/users/[:id]/getJSON', '\Controllers\UserController#getJSON', 'users.json' );
        $router->map( 'GET',  '/users/[:id]/delete', '\Controllers\UserController#delete_warn', 'users.delete_warn' );
        $router->map( 'POST', '/users/[:id]/delete', '\Controllers\UserController#delete', 'users.delete' );
        $router->map( 'GET',  '/users/[:id]', '\Controllers\UserController#show', 'users.show' );
        $router->map( 'GET',  '/users/[:id]/files/[*:name]', '\Controllers\UserController#getFile', 'users.getFile' );
        $router->map( 'POST', '/users/[:id]/save', '\Controllers\UserController#save', 'users.save' );


                $router->map( 'GET', '/login', '\Controllers\UserController#login', 'users.login' );
        $router->map( 'POST', '/login', '\Controllers\UserController#login_post', 'users.login_post' );

        $router->map( 'GET', '/logout', '\Controllers\UserController#logout', 'users.logout' );


        parent::registerRoutes($router); // TODO: Change the autogenerated stub
    }


    public function index( $params = array() )
    {

        $userRepository = \App::entityManager()->getRepository('\Models\User');
        $params['users'] = $userRepository->findAll();

        return \App::render('users/list.twig', $params );

    }

    public function myAccount()
    {


        return \App::render('users/my-account.twig', array());

    }




    public function login()
    {


        return \App::render('users/login.twig');

    }
    public function register()
    {


        return \App::render('users/register.twig');

    }
    public function logout()
    {


        unset($_SESSION['current_user_id']);

        \App::setNotice("You have logged out. Goodbye!", 'success');

        return \App::render('users/login.twig');

    }

    public function public_json( $params ) {
        /** @var $user \Models\User */

        $user  = \App::entityManager()->find('Models\User', $params['id']);


        $out = array(
            'sites' => array()
        );


        /** @var $site \Models\Site */
        foreach( $user->getSitesByVisibility('public') as $site ) {
            $out['sites'][] = array(
                'name' => $site->getName(),
                'latitude' => $site->getLatitude(),
                'longitude' => $site->getLongitude(),
            );
        }




        print json_encode( $out );
    }
    public function show( $params = array() ) {

        $user = \App::entityManager()->find("\Models\User", $params['id']);

        return \App::render('users/show.twig', array( 'obj' => $user) );

    }
    public function login_post()
    {
        $query = \App::entityManager()->createQuery('SELECT u FROM \Models\User u WHERE u.username LIKE ?1')
            ->setParameter(1,  $_POST['inputUsername']);

        $user = $query->getResult()[0];

        if ( $user ) {

            if ($user->checkPassword($_POST['inputPassword']) === true ) {

                $_SESSION['current_user_id'] = $user->getId();
            }

        }


        if ( isset($_SESSION['current_user_id']) ) {
            header('Location: /');

        } else {
            \App::setNotice("Invalid Username/Password Combination", 'warning');
            header('Location: /login');

        }

    }
}